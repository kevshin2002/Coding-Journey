Introduction:
The command line is a text interface for our computer.
It's a program that takes in commands and passes them on to the computer's operating system to run.

From the command line, we can navigate through files and folders on our computer just like a file explorer.
The difference is that the command line is fully text-based.

The advantage of using the command line is its power.
We can run programs, write scripts to automate common tasks, and combine simple commands to handle difficult tasks.
All of these traits make it an important programming tool.

This course is for unix-based systems such as Linux and Mac OS x.
Appendix of all commands taught for this course:
https://www.codecademy.com/article/command-line-commands

Filesystem:
A filesystem organizes a computer's files and directories into a tree structure:
The first directory in the filesystem is the root directory. It is the parent of all other directories and files in the filesystem.
Each parent directory can contain more child directories and files.
Each directory can contain more files and child directories. The parent-child relationship continues as long as directories and files are nested.

ls:
A command is a directive to the computer to perform a specific task.
When we type ls, the command line looks at the directory we're in and then "lists" all the files and directories inside of it.

In the terminal, the first thing we see is $ and this is called a shell prompt. 
It appears when the terminal is ready to accept a command.

pwd:
pwd stands for print working directory.
It outputs the name of the directory we're currently in, called the working directory.
Together with ls, the pwd command is useful to show where we are in the filesystem.

cd :
cd stands for change directory.
Just as we switch to a folder, cd switches us into the directory we specify.
In other words, cd changes the working directory.
When a file, directory, or program is passed into a command, it is called an argument.

The cd command takes a directory name as an argument and switches into that directory.
It's also important to move up one directory. For this, we use the .. argment.
This (..) argument stands for the directory above the current working directory.

We can use also cd to move across multiple directories.
To do so, we provide cd a relative path to the directory as an argument.
Example:
$ cd 2015/jan/memory

In this example, we will navigate directly to memory from blog using cd with the relative path (/).
We can also move up multiple directories using the .. argument. To go up 2 directories, we do ../...
Example:
cd ../..

We can also move to an adjacent directory using .. and then a directory name.
Example:
cd ../2014

mkdir:
We can create directories using the mkdir command.
The mkdir command stands for "make directory". 
It takes in a directory name as an argument and then creates a new directory in the current working directory.

touch:
To create new files, we use touch.
Example:
$ touch keyboard.txt

The touch command creates a new file inside the working directory.
It takes in a filename as an argment and then creates an empty file with that name in the current working directory.

Helper Commands:
tab can be used to autocomplete our command.
When we are typing the name of an existing file, we can use tab to finish the rest of the name.
The up and down arrows of our keyboard can be used to cycle through our previous commands.
The up arrow will take us to our most recent and down arrow will take us back through to the most recent one.

clear is used to clear our terminal which is useful when it's full of previous commands and outputs.
It doesn't change or undo our previous commands.

Review:
The command line is a text interface for the computer's operating system. To access the command line, we use the terminal.
A filesystem organizes a computer's files and directories into a tree structure. It starts with the root directory. Each parent directory can contain more child directories and files.
From the command line, you can navigate through files and folders on our computer:
pwd outputs the name of the current working directory.
ls lists all files and directories in the working directory.
cd switches us into the directory we specify.
mkdir creates a new directory in the working directory.
touch creates a new file inside the working directory.

Helper commands:
clear clears the terminal
tab autocompletes the name of a file or directory
Up or Down arrow key allows us to cycle through previous commands.